source("C:/Users/ASUS/OneDrive/Desktop/Study-Material/IIIT-Kottayam/SEM-6/Data warehousing and mining ICS 321/Lab/Learning R youtube/CourseFiles/RStudio.R", echo=TRUE)
library(datasets)  # Load built-in datasets
head(iris)         # Show the first six lines of iris data
summary(iris)      # Summary statistics for iris data
plot(iris)         # Scatterplot matrix for iris data
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
# Clear console
cat("\014")  # ctrl+L
# I recommend "pacman" for managing add-on packages. It will
# install packages, if needed, and then load the packages.
install.packages("pacman")
# Then load the package by using either of the following:
require(pacman)  # Gives a confirmation message.
library(pacman)  # No message.
p_unload(all)  # Easier: clears all add-ons
library(pacman)  # No message.
detach("package:datasets", unload = TRUE)  # For base
p_unload(all)  # Easier: clears all add-ons
# Or, by using "pacman::p_load" you can use the p_load
# function from pacman without actually loading pacman.
# These are packages I load every time.
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes,
ggvis, httr, lubridate, plotly, rio, rmarkdown, shiny,
stringr, tidyr)
library(datasets)  # Load/unload base packages manually
# Clear packages
p_unload(dplyr, tidyr, stringr) # Clear specific packages
p_unload(all)  # Easier: clears all add-ons
detach("package:datasets", unload = TRUE)  # For base
# Clear console
cat("\014")  # ctrl+L
c(0.1, 0.6, 33.8, 1.9, 9.6, 4.3, 33.7, 0.3, 0.0, 0.1)
z <- c(0.1, 0.6, 33.8, 1.9, 9.6, 4.3, 33.7, 0.3, 0.0, 0.1)
z
mean(z)
sum(z)
max(z)
s <= z>20
s <- z>20
s
s <- z[z>20]
s
mean(z[z>4])
k <- z[z==0 | z==6]
k
k <- z[z==0 | z>20]
k
k <- z[z==0 | z==6]
k
z <- c(0.1, 0.6, 33.8, 1.9, 9.6, 4.3, 33.7, 0.3, 0.0, 0.1) # Inputting values into a vector
cls
clear
clean
source("C:/Users/ASUS/OneDrive/Desktop/Study-Material/IIIT-Kottayam/SEM-6/Data warehousing and mining ICS 321/Lab/Lab - 1/lab1.R", echo=TRUE)
source("C:/Users/ASUS/OneDrive/Desktop/Study-Material/IIIT-Kottayam/SEM-6/Data warehousing and mining ICS 321/Lab/Lab - 1/lab1.R", echo=TRUE)
source("C:/Users/ASUS/OneDrive/Desktop/Study-Material/IIIT-Kottayam/SEM-6/Data warehousing and mining ICS 321/Lab/Lab-2/lab2.R", echo=TRUE)
# Reading input and converting it to integer
inp = readline()
if( inp %% 2 == 0 ){
print(paste(inp,"is even"))
}else{
print(paste(inp,"is odd"))
}
# Reading input and converting it to integer
inp = readline()
if( inp %% 2 == 0 ){
print(paste(inp,"is even"))
}else{
print(paste(inp,"is odd"))
}
# Reading input and converting it to integer
inp = readline()
inp = as.integer(inp)
if( inp %% 2 == 0 ){
print(paste(inp,"is even"))
}else{
print(paste(inp,"is odd"))
}
inp = as.integer(inp)
if( inp %% 2 == 0 ){
print(paste(inp,"is even"))
}else{
print(paste(inp,"is odd"))
}
# Write a R-program to find the factorial of a number using a for loop
fac<-1
for(x in 1:inp){
fac = fac*x
}
print(fac)
source("C:/Users/ASUS/OneDrive/Desktop/Study-Material/IIIT-Kottayam/SEM-6/Data warehousing and mining ICS 321/Lab/Lab-2/lab2.R", echo=TRUE)
# using a while loop
factorio = 1
x = 1
while(x<inp){
factorio = factorio * x
}
# Reading input and converting it to integer
inp = readline()
inp = as.integer(inp)
source("C:/Users/ASUS/OneDrive/Desktop/Study-Material/IIIT-Kottayam/SEM-6/Data warehousing and mining ICS 321/Lab/Lab-2/lab2.R", echo=TRUE)
source("C:/Users/ASUS/OneDrive/Desktop/Study-Material/IIIT-Kottayam/SEM-6/Data warehousing and mining ICS 321/Lab/Lab-2/lab2.R", echo=TRUE)
fac<-function(inp){
factorial(inp)
}
fac(inp)
sum1<-0
for(i in 1:inp){
sum1= sum1+ i
}
print(sum1)
sum2=0
i=0
while(i <= inp){
sum2=sum2+i
}
sum2=0
i=0
while(i <= inp){
sum2=sum2+i
}
sum2=0
i=0
while(i <= inp){
sum2=sum2+i
}
sum2=0
i=0
while(i <= inp){
sum2=sum2+i
i=i+1
}
print(sum2)
sumfunc<-function(inp){
sum = (num * (num + 1)) / 2;
}
print(sum)
sumfunc<-function(inp){
sum = (inp * (inp + 1)) / 2;
}
print(sum)
sumfunc<-function(inp){
inp = (inp * (inp + 1)) / 2;
}
print(sum)
print(sumfunc(inp))
sumfunc<-function(inp){
inp = (inp * (inp + 1)) / 2;
}
print(sumfunc(inp))
primeOrNot<-function(inp){
flag = TRUE
for(i in 1:inp ){
if(inp%%i==0){
flag = FALSE
}
}
}
primeOrNot(inp)
print(primeOrNot(inp))
primeOrNot<-function(inp){
flag = TRUE
for(i in 1:inp ){
if(inp%%i==0){
flag = FALSE
break
}
}
if(flag){
print(paste(inp,"is prime"))
}else{
print(paste(inp,"is not prime"))
}
}
primeOrNot(inp)
primeOrNot<-function(inp){
flag = TRUE
for(i in 2:inp ){
if(inp%%i==0){
flag = FALSE
break
}
}
if(flag){
print(paste(inp,"is prime"))
}else{
print(paste(inp,"is not prime"))
}
}
primeOrNot(inp)
primeOrNot<-function(inp){
flag = TRUE
for(i in 2:inp ){
if(inp%%i==0){
print(i)
flag = FALSE
break
}
}
if(flag){
print(paste(inp,"is prime"))
}else{
print(paste(inp,"is not prime"))
}
}
primeOrNot(inp)
primeOrNot<-function(inp){
flag = TRUE
for(i in 2:inp-1 ){
if(inp%%i==0){
print(i)
flag = FALSE
break
}
}
if(flag){
print(paste(inp,"is prime"))
}else{
print(paste(inp,"is not prime"))
}
}
primeOrNot(inp)
primeOrNot<-function(inp){
flag = TRUE
for(z in 2:inp-1 ){
if(inp%%i==0){
print(i)
flag = FALSE
break
}
}
if(flag){
print(paste(inp,"is prime"))
}else{
print(paste(inp,"is not prime"))
}
}
primeOrNot(inp)
primeOrNot<-function(inp){
flag = TRUE
for(z in 2:inp-1 ){
if(inp%%i==0){
print(i)
flag = FALSE
break
}
}
if(flag){
print(paste(inp,"is prime"))
}else{
print(paste(inp,"is not prime"))
}
}
primeOrNot(inp)
primeOrNot(inp)
primeOrNot<-function(inp){
flag = TRUE
for(z in 2:inp-1 ){
if(inp %% z == 0){
print(z)
flag = FALSE
break
}
}
if(flag){
print(paste(inp,"is prime"))
}else{
print(paste(inp,"is not prime"))
}
}
primeOrNot(inp)
primeOrNot<-function(inp){
flag = TRUE
for(z in 2:inp-1 ){
if((inp %% z) == 0){
print(z)
flag = FALSE
break
}
}
if(flag){
print(paste(inp,"is prime"))
}else{
print(paste(inp,"is not prime"))
}
}
primeOrNot(inp)
primeOrNot<-function(inp){
flag = TRUE
for(z in 2:inp-1 ){
if((inp %% z) == 0){
print(z)
flag = FALSE
break
}
print(z)
}
if(flag){
print(paste(inp,"is prime"))
}else{
print(paste(inp,"is not prime"))
}
}
primeOrNot(inp)
primeOrNot<-function(inp){
flag = TRUE
for(z in 2:inp-1 ){
if((inp %% z) == 0){
print(z)
flag = FALSE
}
print(z)
}
if(flag){
print(paste(inp,"is prime"))
}else{
print(paste(inp,"is not prime"))
}
}
primeOrNot(inp)
primeOrNot<-function(inp){
flag = TRUE
for(z in 2:(inp-1) ){
if((inp %% z) == 0){
print(z)
flag = FALSE
}
print(z)
}
if(flag){
print(paste(inp,"is prime"))
}else{
print(paste(inp,"is not prime"))
}
}
primeOrNot(inp)
A <- matrix(1:6, nrow=2)
A
B<- matrix(1:6,ncol=2)
B
A%*%B
cls
clear
source("C:/Users/ASUS/OneDrive/Desktop/Study-Material/IIIT-Kottayam/SEM-6/Data warehousing and mining ICS 321/Lab/Lab-3/lab3.R", echo=TRUE)
source("C:/Users/ASUS/OneDrive/Desktop/Study-Material/IIIT-Kottayam/SEM-6/Data warehousing and mining ICS 321/Lab/Lab-3/lab3.R")
source("C:/Users/ASUS/OneDrive/Desktop/Study-Material/IIIT-Kottayam/SEM-6/Data warehousing and mining ICS 321/Lab/Lab-3/lab3.R", echo=TRUE)
source("C:/Users/ASUS/OneDrive/Desktop/Study-Material/IIIT-Kottayam/SEM-6/Data warehousing and mining ICS 321/Lab/Lab-3/lab3.R", echo=TRUE)
print(getwd())
setwd("C:/Users/ASUS/OneDrive/Documents")
Pupae <- read.csv("pupae.csv")
Pupae <- read.csv("pupae.csv")
source("C:/Users/ASUS/OneDrive/Desktop/Study-Material/IIIT-Kottayam/SEM-6/Data warehousing and mining ICS 321/Lab/Lab-3/lab3.R")
source("C:/Users/ASUS/OneDrive/Desktop/Study-Material/IIIT-Kottayam/SEM-6/Data warehousing and mining ICS 321/Lab/Lab-3/lab3.R")
setwd("C:\Users\ASUS\OneDrive\Desktop\Study-Material\IIIT-Kottayam\SEM-6\Data warehousing and mining ICS 321\Lab\Lab-3")
source("C:/Users/ASUS/OneDrive/Desktop/Study-Material/IIIT-Kottayam/SEM-6/Data warehousing and mining ICS 321/Lab/Lab-3/lab3.R")
setwd("C:/Users/ASUS/OneDrive/Desktop/Study-Material/IIIT-Kottayam/SEM-6/Data warehousing and mining ICS 321/Lab/Lab-3")
Pupae <- read.csv("pupae.csv")
pupae$CO2_treatment <- as.factor(pupae$CO2_treatmen)
CO2_treatment <- as.factor(pupae$CO2_treatmen)
source("C:/Users/ASUS/OneDrive/Desktop/Study-Material/IIIT-Kottayam/SEM-6/Data warehousing and mining ICS 321/Lab/Lab-3/lab3.R")
pupae$CO2_treatment <- as.factor(pupae$CO2_treatment)
pupae$CO2_treatment <- is.factor(pupae$CO2_treatment)
source("C:/Users/ASUS/OneDrive/Desktop/Study-Material/IIIT-Kottayam/SEM-6/Data warehousing and mining ICS 321/Lab/Lab-3/lab3.R")
pupae <- read.csv("pupae.csv")
pupae$CO2_treatment <- as.factor(pupae$CO2_treatment)
levels(pupae$CO2_treatment)
palette(c("blue", "red"))
plot(Frass ~ PupalWeight, col = CO2_treatment, data = pupae, pch = 19)
legend("topleft", levels(pupae$CO2_treatment), col = palette(), pch = 19)
head(pupae)
print(unique(pupae$CO2_treatment))
legend("", levels(pupae$CO2_treatment), col = palette(), pch = 19)
legend("center", levels(pupae$CO2_treatment), col = palette(), pch = 19)
legend("", levels(pupae$CO2_treatment), col = palette(), pch = 19)
legend("topleft", levels(pupae$CO2_treatment), col = palette(), pch = 19)
legend("topleft", levels(pupae$CO2_treatment), col = palette(), pch = 19)
legend("topleft", levels(pupae$CO2_treatment), col = palette(), pch = 19)
palette(c("blue", "red"))
plot(Frass ~ PupalWeight, col = CO2_treatment, data = pupae, pch = 19)
legend("topleft", levels(pupae$CO2_treatment), col = palette(), pch = 19)
# Solution 1: separate windows windows() # optional, if not provided will
# display in Rstudio window
plot(Frass ~ PupalWeight, col = CO2_treatment, data = subset(pupae, CO2_treatment =="280"), pch = 19)
plot(Frass ~ PupalWeight, col = CO2_treatment, data = subset(pupae, CO2_treatment =="400"), pch = 19)
# solution 2: side by side
par(mfrow = c(1, 2))
plot(Frass ~ PupalWeight, col = CO2_treatment, data = subset(pupae, T_treatment =="ambient"), pch = 19)
plot(Frass ~ PupalWeight, col = CO2_treatment, data = subset(pupae, T_treatment =="elevated"), pch = 19)
par(mfrow = c(1, 2))
plot(Frass ~ PupalWeight, col = CO2_treatment, data = subset(pupae, T_treatment =="ambient"), xlim = c(0, 0.5), ylim = c(0, 3.5), pch = 19)
plot(Frass ~ PupalWeight, col = CO2_treatment, data = subset(pupae, T_treatment =="elevated"), xlim = c(0, 0.5), ylim = c(0, 3.5), pch = 19)
# setting the working directory to use the csv file
print(getwd())
# setting the working directory to use the csv file
print(getwd())
ē# setting the working directory to use the csv file
ē# setting the working directory to use the csv file
ē# setting the working directory to use the csv file
ē# setting the working directory to use the csv file
ē# setting the working directory to use the csv file
ē# setting the working directory to use the csv file
source("C:/Users/ASUS/OneDrive/Desktop/Study-Material/IIIT-Kottayam/SEM-6/Data warehousing and mining ICS 321/Lab/Lab-3/lab3.R", echo=TRUE)
source("C:/Users/ASUS/OneDrive/Desktop/Study-Material/IIIT-Kottayam/SEM-6/Data warehousing and mining ICS 321/Lab/Lab-3/lab3.R")
source("C:/Users/ASUS/OneDrive/Desktop/Study-Material/IIIT-Kottayam/SEM-6/Data warehousing and mining ICS 321/Lab/Lab-3/lab3.R")
