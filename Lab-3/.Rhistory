p_unload(all)  # Easier: clears all add-ons
# Or, by using "pacman::p_load" you can use the p_load
# function from pacman without actually loading pacman.
# These are packages I load every time.
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes,
ggvis, httr, lubridate, plotly, rio, rmarkdown, shiny,
stringr, tidyr)
library(datasets)  # Load/unload base packages manually
# Clear packages
p_unload(dplyr, tidyr, stringr) # Clear specific packages
p_unload(all)  # Easier: clears all add-ons
detach("package:datasets", unload = TRUE)  # For base
# Clear console
cat("\014")  # ctrl+L
c(0.1, 0.6, 33.8, 1.9, 9.6, 4.3, 33.7, 0.3, 0.0, 0.1)
z <- c(0.1, 0.6, 33.8, 1.9, 9.6, 4.3, 33.7, 0.3, 0.0, 0.1)
z
mean(z)
sum(z)
max(z)
s <= z>20
s <- z>20
s
s <- z[z>20]
s
mean(z[z>4])
k <- z[z==0 | z==6]
k
k <- z[z==0 | z>20]
k
k <- z[z==0 | z==6]
k
z <- c(0.1, 0.6, 33.8, 1.9, 9.6, 4.3, 33.7, 0.3, 0.0, 0.1) # Inputting values into a vector
cls
clear
clean
source("C:/Users/ASUS/OneDrive/Desktop/Study-Material/IIIT-Kottayam/SEM-6/Data warehousing and mining ICS 321/Lab/Lab - 1/lab1.R", echo=TRUE)
source("C:/Users/ASUS/OneDrive/Desktop/Study-Material/IIIT-Kottayam/SEM-6/Data warehousing and mining ICS 321/Lab/Lab - 1/lab1.R", echo=TRUE)
source("C:/Users/ASUS/OneDrive/Desktop/Study-Material/IIIT-Kottayam/SEM-6/Data warehousing and mining ICS 321/Lab/Lab-2/lab2.R", echo=TRUE)
# Reading input and converting it to integer
inp = readline()
if( inp %% 2 == 0 ){
print(paste(inp,"is even"))
}else{
print(paste(inp,"is odd"))
}
# Reading input and converting it to integer
inp = readline()
if( inp %% 2 == 0 ){
print(paste(inp,"is even"))
}else{
print(paste(inp,"is odd"))
}
# Reading input and converting it to integer
inp = readline()
inp = as.integer(inp)
if( inp %% 2 == 0 ){
print(paste(inp,"is even"))
}else{
print(paste(inp,"is odd"))
}
inp = as.integer(inp)
if( inp %% 2 == 0 ){
print(paste(inp,"is even"))
}else{
print(paste(inp,"is odd"))
}
# Write a R-program to find the factorial of a number using a for loop
fac<-1
for(x in 1:inp){
fac = fac*x
}
print(fac)
source("C:/Users/ASUS/OneDrive/Desktop/Study-Material/IIIT-Kottayam/SEM-6/Data warehousing and mining ICS 321/Lab/Lab-2/lab2.R", echo=TRUE)
# using a while loop
factorio = 1
x = 1
while(x<inp){
factorio = factorio * x
}
# Reading input and converting it to integer
inp = readline()
inp = as.integer(inp)
source("C:/Users/ASUS/OneDrive/Desktop/Study-Material/IIIT-Kottayam/SEM-6/Data warehousing and mining ICS 321/Lab/Lab-2/lab2.R", echo=TRUE)
source("C:/Users/ASUS/OneDrive/Desktop/Study-Material/IIIT-Kottayam/SEM-6/Data warehousing and mining ICS 321/Lab/Lab-2/lab2.R", echo=TRUE)
fac<-function(inp){
factorial(inp)
}
fac(inp)
sum1<-0
for(i in 1:inp){
sum1= sum1+ i
}
print(sum1)
sum2=0
i=0
while(i <= inp){
sum2=sum2+i
}
sum2=0
i=0
while(i <= inp){
sum2=sum2+i
}
sum2=0
i=0
while(i <= inp){
sum2=sum2+i
}
sum2=0
i=0
while(i <= inp){
sum2=sum2+i
i=i+1
}
print(sum2)
sumfunc<-function(inp){
sum = (num * (num + 1)) / 2;
}
print(sum)
sumfunc<-function(inp){
sum = (inp * (inp + 1)) / 2;
}
print(sum)
sumfunc<-function(inp){
inp = (inp * (inp + 1)) / 2;
}
print(sum)
print(sumfunc(inp))
sumfunc<-function(inp){
inp = (inp * (inp + 1)) / 2;
}
print(sumfunc(inp))
primeOrNot<-function(inp){
flag = TRUE
for(i in 1:inp ){
if(inp%%i==0){
flag = FALSE
}
}
}
primeOrNot(inp)
print(primeOrNot(inp))
primeOrNot<-function(inp){
flag = TRUE
for(i in 1:inp ){
if(inp%%i==0){
flag = FALSE
break
}
}
if(flag){
print(paste(inp,"is prime"))
}else{
print(paste(inp,"is not prime"))
}
}
primeOrNot(inp)
primeOrNot<-function(inp){
flag = TRUE
for(i in 2:inp ){
if(inp%%i==0){
flag = FALSE
break
}
}
if(flag){
print(paste(inp,"is prime"))
}else{
print(paste(inp,"is not prime"))
}
}
primeOrNot(inp)
primeOrNot<-function(inp){
flag = TRUE
for(i in 2:inp ){
if(inp%%i==0){
print(i)
flag = FALSE
break
}
}
if(flag){
print(paste(inp,"is prime"))
}else{
print(paste(inp,"is not prime"))
}
}
primeOrNot(inp)
primeOrNot<-function(inp){
flag = TRUE
for(i in 2:inp-1 ){
if(inp%%i==0){
print(i)
flag = FALSE
break
}
}
if(flag){
print(paste(inp,"is prime"))
}else{
print(paste(inp,"is not prime"))
}
}
primeOrNot(inp)
primeOrNot<-function(inp){
flag = TRUE
for(z in 2:inp-1 ){
if(inp%%i==0){
print(i)
flag = FALSE
break
}
}
if(flag){
print(paste(inp,"is prime"))
}else{
print(paste(inp,"is not prime"))
}
}
primeOrNot(inp)
primeOrNot<-function(inp){
flag = TRUE
for(z in 2:inp-1 ){
if(inp%%i==0){
print(i)
flag = FALSE
break
}
}
if(flag){
print(paste(inp,"is prime"))
}else{
print(paste(inp,"is not prime"))
}
}
primeOrNot(inp)
primeOrNot(inp)
primeOrNot<-function(inp){
flag = TRUE
for(z in 2:inp-1 ){
if(inp %% z == 0){
print(z)
flag = FALSE
break
}
}
if(flag){
print(paste(inp,"is prime"))
}else{
print(paste(inp,"is not prime"))
}
}
primeOrNot(inp)
primeOrNot<-function(inp){
flag = TRUE
for(z in 2:inp-1 ){
if((inp %% z) == 0){
print(z)
flag = FALSE
break
}
}
if(flag){
print(paste(inp,"is prime"))
}else{
print(paste(inp,"is not prime"))
}
}
primeOrNot(inp)
primeOrNot<-function(inp){
flag = TRUE
for(z in 2:inp-1 ){
if((inp %% z) == 0){
print(z)
flag = FALSE
break
}
print(z)
}
if(flag){
print(paste(inp,"is prime"))
}else{
print(paste(inp,"is not prime"))
}
}
primeOrNot(inp)
primeOrNot<-function(inp){
flag = TRUE
for(z in 2:inp-1 ){
if((inp %% z) == 0){
print(z)
flag = FALSE
}
print(z)
}
if(flag){
print(paste(inp,"is prime"))
}else{
print(paste(inp,"is not prime"))
}
}
primeOrNot(inp)
primeOrNot<-function(inp){
flag = TRUE
for(z in 2:(inp-1) ){
if((inp %% z) == 0){
print(z)
flag = FALSE
}
print(z)
}
if(flag){
print(paste(inp,"is prime"))
}else{
print(paste(inp,"is not prime"))
}
}
primeOrNot(inp)
A <- matrix(1:6, nrow=2)
A
B<- matrix(1:6,ncol=2)
B
A%*%B
dbinom(x = 0, size = 10, prob = 0.5);
dbinom(x = 5, size = 10, prob = 0.5)
dbinom(x = 0, size = 10, prob = 0.5)
r <- rnorm(100, mean = 100, std = 5)
r <- rnorm(100, mean = 100, sd = 5)
plot(r)
hist(r)
boxplot(r)
par(mfrow=c(1,2))
hist(r)
boxplot(r)
par(mfrow=c(2,2))
hist(r)
boxplot(r)
par(mfrow=c(1,2))
hist(r)
boxplot(r)
mean(x)
mean(r)
sd(r)
median(r)
IQR(r)
t.test(r)
t.test(r,mu=100)
t.test(r,mu=25)
t.test(r,mu=100)
t.test(r,mu=90)
wilcox.test(r,mu=100)
wilcox.test(r,mu=90)
# Plots of the data
plot(Frass ~ pupalWeight,data = pupae)
# setting the working directory to use the csv file
print(getwd())
setwd("C:/Users/ASUS/OneDrive/Desktop/Study-Material/IIIT-Kottayam/SEM-6/Data warehousing and mining ICS 321/Lab/Lab-3")
# reading the csv file
pupae <- read.csv("pupae.csv")
# Plots of the data
plot(Frass ~ pupalWeight,data = pupae)
# Plots of the data
plot(Frass ~ PupalWeight,data = pupae)
# Summary of the model
model <- lm(Frass ~ Pupal,Weight, data = pupae)
# Summary of the model
model <- lm(Frass ~ PupalWeight, data = pupae)
summary(model)
residualPlot(model)
resid(model)
plot(fitted(model), res)
plot(fitted(model), res)
plot(res)
res <- resid(model)
plot(fitted(model), res)
abline(0,0)
# Plots of the data
plot(Frass ~ PupalWeight,data = pupae)
# Plots of the data
par(c(1,1))
plot(Frass ~ PupalWeight,data = pupae)
# Plots of the data
par(c(1,1))
# Plots of the data
par(c(1))
plot(Frass ~ PupalWeight,data = pupae)
# Plots of the data
par(mfrow = c(1,1))
plot(Frass ~ PupalWeight,data = pupae)
# Summary of the model
model <- lm(Frass ~ PupalWeight, data = pupae)
summary(model)
res <- resid(model)
plot(fitted(model), res)
abline(0,0)
qqPlot(res)
qqPlot(res)
qqline(res)
qqnorm(res)
qqnorm(res)
qqline(res)
qqPlot(res)
#
plot(fitted(model), res)
abline(0,0)
source("C:/Users/ASUS/OneDrive/Desktop/Study-Material/IIIT-Kottayam/SEM-6/Data warehousing and mining ICS 321/Lab/Lab-3/lab3.R")
# setting the working directory to use the csv file
print(getwd())
setwd("C:/Users/ASUS/OneDrive/Desktop/Study-Material/IIIT-Kottayam/SEM-6/Data warehousing and mining ICS 321/Lab/Lab-3")
source("C:/Users/ASUS/OneDrive/Desktop/Study-Material/IIIT-Kottayam/SEM-6/Data warehousing and mining ICS 321/Lab/Lab-3/lab3.R")
source("C:/Users/ASUS/OneDrive/Desktop/Study-Material/IIIT-Kottayam/SEM-6/Data warehousing and mining ICS 321/Lab/Lab-3/lab3.R")
# Find all the files on
# https://github.com/Abhijit25Mishra/R-Lab--ICS-321-
# https://rpubs.com/Panda_250
print("Abhijit Mishra")
# Reading input and converting it to integer
inp = readline()
# condition to find weather even or odd
if( inp %% 2 == 0 ){
print(paste(inp,"is even"))
}else{
print(paste(inp,"is odd"))
}
# Find all the files on
# https://github.com/Abhijit25Mishra/R-Lab--ICS-321-
# https://rpubs.com/Panda_250
print("Abhijit Mishra")
print("Abhijit Mishra")
# Find all the files on
# https://github.com/Abhijit25Mishra/R-Lab--ICS-321-
# https://rpubs.com/Panda_250
print("Abhijit Mishra")
z <- c(0.1, 0.6, 33.8, 1.9, 9.6, 4.3, 33.7, 0.3, 0.0, 0.1) # Inputting values into a vector
z # Printing the vector
mean(z) # Mean of the vector z
sum(z) # sum of all elements of z
max(z) # maximum element in vector z
s <- z[z>20] # forming a subset of z such that z>20
s # printing vector
mean(z[z>4]) # finding mean with the given condition
k <- z[z==0 | z==6] # forming a subset with 'OR' of 2 condition
k # printing the vector k
# reading the data into the vectors
length = c(2.1, 3.4, 2.5, 2.7, 2.9)
radius = c(0.3, 0.5, 0.6, 0.9, 1.1)
# correlation between lengths and diameters
cor(length,radius,method = "pearson")
# volume of each cylinder
volume = length * radius * radius
volume
# mean, standard deviation, and coefficient of variation
mean(volume)
sd(volume)
cof_of_var <- sd(volume)/mean(volume) *100
cof_of_var
# Assume your measurements are in centimeters. Recalculate the
# volumes so that their units are in cubic millimeters.
volume_changed_units = volume * 1000
mean(volume_changed_units)
sd(volume_changed_units)
new_cof_of_var = sd(volume_changed_units)/mean(volume_changed_units) * 100
new_cof_of_var
# reading input
x = c(1,2,5,9,11)
y = c(2,5,1,0,23)
# intersection, set difference, union of 2 vectors
print(intersect(x,y))
print(setdiff(x,y))
print(setdiff(y,x))
# Difference between union and c(x,y)
print(union(x,y))
print(c(x,y))
# Construct a matrix with 10 columns and 10 rows, all filled with random
# numbers between 0 and 1
m = matrix( runif(100,0,1), nrow = 10)
m
# Calculate the row means  of this matrix. and std of rowmeans
rowMeans(m)
sd(rowMeans(m))
# Remake the above matrix with 100 columns, and 10 rows.
m_new = matrix(runif(1000,0,1), nrow = 10)
m_new
colMeans(m_new)
hist(colMeans(m_new))
print(getwd())
setwd("C:/Users/ASUS/OneDrive/Desktop/Study-Material/IIIT-Kottayam/SEM-6/Data warehousing and mining ICS 321/Lab/Lab - 1")
data <- read.csv("cereal.csv")
print(data)
# inspecting the dataset
print(is.data.frame(data))
print(ncol(data))
print(nrow(data))
print(head(data))
print(tail(data))
print(max(data$protein))
print(subset(data,rating==max(rating)))
# adding new column
data$totalcarb <- data$carbo + data$sugars
data
print(tail(data))
print(tail(data))
# inspecting the dataset
print(is.data.frame(data))
print(ncol(data))
data <- read.csv("cereal.csv")
print(getwd())
setwd("C:/Users/ASUS/OneDrive/Desktop/Study-Material/IIIT-Kottayam/SEM-6/Data warehousing and mining ICS 321/Lab/Lab - 1")
print(getwd())
setwd("C:/Users/ASUS/OneDrive/Desktop/Study-Material/IIIT-Kottayam/SEM-6/Data warehousing and mining ICS 321/Lab/Lab - 1")
cd ..
setwd("C:/Users/ASUS/OneDrive/Desktop/Study-Material/IIIT-Kottayam/SEM-6/Data warehousing and mining ICS 321/Lab/Lab - 1")
