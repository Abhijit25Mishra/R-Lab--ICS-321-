barplot(PL)
hist(PL)
SP <- iris$Species
boxplot(PL ~ SP)
summary(aov(PL ~ SP))
PW <- df$Petal.Width
plot(PL, PW, col = SP)
abline(lm(PW ~ PL))
PW <- iris$Petal.Width
plot(PL, PW, col = SP)
abline(lm(PW ~ PL))
heatmap(iris)
heatmap(ma,scale = "column",RowSideColors = rainbow(3)[iris$Species])
ma <- as.matrix(iris[, 1:4]) # convert to matrix
disMatarix <- dist(ma)
plot(hclust(disMatarix))
heatmap(ma,scale = "column",RowSideColors = rainbow(3)[iris$Species])
age <- c(23,23,27,27,39,41,49,50,52,54,54,56,57,58,58,60,61)
age <- c(23,23,27,27,39,41,49,50,52,54,54,56,57,58,58,60,61)
fatpercent <- c(9.5,26.5,7.8,17.8,31.4,25.9,27.4,27.2,31.2,34.6,42.5,28.8,33.4,30.2,34.1,32.9,41.2,35.7)
data <- list(A = age,B = fatpercent)
df <- as.data.frame(data)
data
age <- c(23,23,27,27,39,41,47,49,50,52,54,54,56,57,58,58,60,61)
fatpercent <- c(9.5,26.5,7.8,17.8,31.4,25.9,27.4,27.2,31.2,34.6,42.5,28.8,33.4,30.2,34.1,32.9,41.2,35.7)
data <- list(A = age,B = fatpercent)
data
df <- as.data.frame(data)
df
data <- list(Age = age,%fat = fatpercent)
data <- list(Age = age,FatPercent = fatpercent)
data
df <- as.data.frame(data)
df
cor(df)
cor(df$Age,df$FatPercent)
# Histogram
hist(iris$Petal.Length,breaks = 30,col="blue", xlab = "Petal Length", main = " Histogram of Pertal Length" )
qplot(Sepal.Length, data=iris, geom='histogram', fill=Species, alpha=I(1/2))
qplot(Sepal.Length, data=iris, geom='histogram', fill=Species, alpha=I(1/2))
# importing plotting lib
require(ggplot2)
# Density plot
qplot(Petal.Length, data=iris, geom='density')
qplot(Petal.Length, data=iris, geom='density', color=Species, fill=Species)
qplot(Sepal.Length, data=iris, geom='histogram', fill=Species, alpha=I(1/2))
# Density plot
qplot(Petal.Length, data=iris, geom='density')
qplot(Petal.Length, data=iris, geom='density', color=Species, fill=Species)
qplot(Petal.Width, Petal.Length, data=iris, color=Species)
# Scatter plot
qplot(Petal.Width, Petal.Length, data=iris, color=Species)
cor(iris$Sepal.Length, iris$Petal.Length)
cov(iris$Sepal.Length, iris$Petal.Length)
# correlation and covariance
cor(iris$Sepal.Length, iris$Petal.Length)
cov(iris$Sepal.Length, iris$Petal.Length)
cov(iris[,1:4])
df <- iris[, 1:4]
boxplot(df)
pairs(df)
stars(df)
# making every plot i know of ;)
df <- iris[, 1:4]
boxplot(df)
pairs(df)
stars(df)
boxplot(iris)
scatter.smooth(iris)
matrix(scatter.smooth(iris))
table(iris)
pie(table(iris))
matrix(scatter.smooth(iris))
matrix(scatter.smooth(iris))
scatter.smooth(iris)
matrix(scatter.smooth(iris))
table(iris)
table(iris)
pie(table(iris))
barplot(PL)
hist(PL)
SP <- iris$Species
boxplot(PL ~ SP)
summary(aov(PL ~ SP))
PW <- iris$Petal.Width
plot(PL, PW, col = SP)
abline(lm(PW ~ PL))
ma <- as.matrix(iris[, 1:4]) # convert to matrix
disMatarix <- dist(ma)
plot(hclust(disMatarix))
heatmap(ma,scale = "column",RowSideColors = rainbow(3)[iris$Species])
plot(hclust(disMatarix))
heatmap(ma,scale = "column",RowSideColors = rainbow(3)[iris$Species])
vec1<-c(1.1, 2, 3.0, 4.2)
sum(vec1)
prod(vec1)
mean(vec1)
vec2<-c(1.1,NA, 2, 3.0,NA )
sum(vec2)
prod(vec2)
mean(vec2)
str = c("$I%Love!R programming %","cs^e%portal", "le%.5%rty.in","join2022%")
count(str,"%")
count(str,%)
str_count(str)
str = c("$I%Love!R programming %","cs^e%portal", "le%.5%rty.in","join2022%")
str_count(str)
str_count("%")
str = c("$I%Love!R programming %","cs^e%portal", "le%.5%rty.in","join2022%")
str_count("%")
str = c("$I%Love!R programming %","cs^e%portal", "le%.5%rty.in","join2022%")
str_count(str,pattern = "%")
install.packages("stringr")
library(stringr)
str = c("$I%Love!R programming %","cs^e%portal", "le%.5%rty.in","join2022%")
str_count(str,pattern = "%")
str_count(str,pattern = 'r')
ar <- array(1:5,c(2,3,4))
ar
dim(ar)
for(i in 1:100){
if(i%%4==0 && i%%5==0){
print("BuyNow ")
}
else if(i%%4==0){
print("Now ")
}
else if(i%%5==0){
print("Buy ")
}
else{
print(i)
print(" ")
}
}
for(i in 1:100){
if(i%%4==0 && i%%5==0){
print("BuyNow")
}
else if(i%%4==0){
print("Now")
}
else if(i%%5==0){
print("Buy")
}
else{
print(i)
}
}
print(Sys.Date())
print(Sys.time())
mtcars
data<-mtcars
View(data)
library(dplyr)
select(data)
data<-mtcars
View(data)
dim(data)
summary(data)
randu()
runif(2,1,32)
floor(runif(2,1,32))
floor(runif(2,1,32))
data %>% select(floor(runif(2,1,32))
data
data %>% select(floor(runif(2,1,32))
summary(data)
data %>% select(floor(runif(2,1,32)) )
data %>% select(floor(runif(2,1,1)) )
data %>% select(floor(runif(2,1,11)) )
data %>% select(floor(runif(2,1,11)) )
data %>% select(floor(runif(2,1,11)) )
data %>% select(floor(runif(2,1,11)) )
data %>% select(floor(runif(11,1,11)) )
data %>% select(floor(runif(11,1,11)) )
data %>% row.select(floor(runif(11,1,11)) )
data %>% row(select(floor(runif(11,1,11))) )
data %>% (select(row, floor(runif(11,1,11))) )
data %>% filter(floor(runif(11,1,11)))
data %>% filter(floor(runif(2,1,32)))
data %>% filter(floor(runif(1,1,32)))
data %>% filter(2)
data %>% filter(32)
filter(data,)
filter(data,1)
filter(data,false)
slice_sample(data)
slice_sample(data)
slice_sample(data,n)
slice_sample(data,5)
slice_sample(data,n=5)
sample_frac(data,n=5)
sample_frac(data,n=2)
sample_frac(data,n=2)
slice_sample(data,n=5)
sample_frac(data,n=2)
data %>% select(cyl, hp, wt )
filter(mtcars, am == 1)
filter(mtcars,hp>225)
mean(mtcars$mpg)
median(mtcars$mpg)
arrange(mtcars,desc(hp))
days <- c("Monday","Tuesday","Wednesday","Thrusday","Friday","Saturdat","Sunday")
nrbirds <- c(2,5,0,8,1,2,3)
df<-data.frame(days,nrbirds)
df
dayNumber<-c(1,2,3,4,5,6,7)
x<-c(1,2,3,4,5,6,7)
df$dayNumber <- x
df
df = subset(df,select(days))
df = subset(df,select = days)
df
df = subset(df,select = -c(days))
df
days <- c("Monday","Tuesday","Wednesday","Thrusday","Friday","Saturdat","Sunday")
nrbirds <- c(2,5,0,8,1,2,3)
df<-data.frame(days,nrbirds)
x<-c(1,2,3,4,5,6,7)
df$dayNumber <- x
df = subset(df,select = -c(days))
df
df <- select(df, dayNumber, nrbirds)
df
max_row <- which.max(df$nrbirds)
print(max_row)
df
max_row <- which.max(df$nrbirds)
print(max_row)
df[max_row]
df[max_row]
most_birds_daynumber <- df$dayNumber[max_row]
print(most_birds_daynumber)
df <- arrange(df, desc(nrbirds))
df
library(dplyr)
library(stringr)
set.seed(678)
# Find all the files on
# https://github.com/Abhijit25Mishra/R-Lab--ICS-321-
# https://rpubs.com/Panda_250
print("Abhijit Mishra")
set.seed(678)
print(getwd())
setwd("C:/Users/ASUS/OneDrive/Desktop/Study-Material/IIIT-Kottayam/SEM-6/Data warehousing and mining ICS 321/Lab/Lab-7")
setwd("C:/Users/ASUS/OneDrive/Desktop/Study-Material/IIIT-Kottayam/SEM-6/Data warehousing and mining ICS 321/Lab/Lab-8")
path <- 'https://raw.githubusercontent.com/guru99-edu/R-Programming/master/titanic_data.csv'
titanic <-read.csv(path)
head(titanic)
path <- 'https://github.com/datasciencedojo/datasets/blob/master/titanic.csv'
titanic <-read.csv(path)
head(titanic)
path <- 'titanic.csv'
titanic <-read.csv(path)
head(titanic)
tail(titanic)
shuffle_index <- sample(1:nrow(titanic))
head(shuffle_index)
shuffle_index <- sample(1:nrow(titanic))
head(shuffle_index)
titanic <- titanic[shuffle_index, ]
head(titanic)
summary(titanic)
head(titanic)
tail(titanic)
summary(titanic)
head(titanic)
tail(titanic)
shuffle_index <- sample(1:nrow(titanic))
head(shuffle_index)
titanic <- titanic[shuffle_index, ]
head(titanic)
head(titanic)
# Cleaning the data
library(dplyr)
# Drop variables
clean_titanic <- titanic % > %
select(-c(home.dest, cabin, name, X, ticket)) % > %
#Convert to factor level
mutate(pclass = factor(pclass, levels = c(1, 2, 3), labels = c('Upper', 'Middle', 'Lower')),
survived = factor(survived, levels = c(0, 1), labels = c('No', 'Yes'))) % > %
na.omit()
library(dplyr)
# Drop variables
clean_titanic <- titanic % > %
select(-c(home.dest, cabin, name, X, ticket)) % > %
mutate(pclass = factor(pclass, levels = c(1, 2, 3), labels = c('Upper', 'Middle', 'Lower')),
survived = factor(survived, levels = c(0, 1), labels = c('No', 'Yes'))) % > %
na.omit()
# Drop variables
clean_titanic <- titanic %>%
select(-c(home.dest, cabin, name, X, ticket)) %>%
mutate(pclass = factor(pclass, levels = c(1, 2, 3), labels = c('Upper', 'Middle', 'Lower')),
survived = factor(survived, levels = c(0, 1), labels = c('No', 'Yes'))) %>%
na.omit()
# Drop variables
clean_titanic <- titanic %>%select(-c(home.dest, cabin, name, X, ticket)) %>% mutate(pclass = factor(pclass, levels = c(1, 2, 3), labels = c('Upper', 'Middle', 'Lower')),survived = factor(survived, levels = c(0, 1), labels = c('No', 'Yes')))%>%na.omit()
head(titanic)
View(titanic)
# Drop variables
clean_titanic <- titanic %>%select(-c(cabin, name, PassengerId, ticket)) %>% mutate(pclass = factor(pclass, levels = c(1, 2, 3), labels = c('Upper', 'Middle', 'Lower')),survived = factor(survived, levels = c(0, 1), labels = c('No', 'Yes')))%>%na.omit()
# Drop variables
clean_titanic <- titanic %>%select(-c(Cabin, Name, PassengerId, Ticket)) %>% mutate(Pclass = factor(Pclass, levels = c(1, 2, 3), labels = c('Upper', 'Middle', 'Lower')),Survived = factor(Survived, levels = c(0, 1), labels = c('No', 'Yes')))%>%na.omit()
glimpse(clean_titanic)
data_train <- create_train_test(clean_titanic, size = 0.8, train = TRUE)
data_test <- create_train_test(clean_titanic,size = 0.8, train = FALSE)
create_train_test <- function(data, size = 0.8, train = TRUE) {
n_row = nrow(data)
total_row = size * n_row
train_sample < - 1: total_row
if (train == TRUE) {
return (data[train_sample, ])
} else {
return (data[-train_sample, ])
}
}
data_train <- create_train_test(clean_titanic, size = 0.8, train = TRUE)
train,test = sample.split(clean_titanic,SplitRatio = 0.8)
X = sample.split(Y = clean_titanic,SplitRatio = 0.8)
library(caTools)
X = sample.split(Y = clean_titanic,SplitRatio = 0.8)
train = data_1[X,]
X
X = sample.split(Y = clean_titanic,SplitRatio = 0.8)
traindata = clean_titanic[X,]
testdata = clean_titanic[!X,]
head(traindata)
dim(traindata)
dim(testdata)
dim(clean_titanic)
714*0.2
prop.table(table(traindata$survived))
prop.table(table(traindata$Survived))
prop.table(table(testdata$Survived))
install.packages("rpart.plot")
library(rpart, lib.loc = "C:/Program Files/R/R-4.2.2/library")
library(rpart)
library(rpart.plot)
library(rpart.plot)
library(rpart, lib.loc = "C:/Program Files/R/R-4.2.2/library")
fit <- rpart(Survived~., data = traindata, method = 'class')
rpart.plot(fit, extra = 106)
table_mat <- table(testdata$Survived, predict_unseen)
predict_unseen <-predict(fit, testdata, type = 'class')
table_mat <- table(testdata$Survived, predict_unseen)
table_mat
accuracy_Test <- sum(diag(table_mat)) / sum(table_mat)
print(paste('Accuracy for test', accuracy_Test))
accuracy_tune <- function(fit) {
predict_unseen <- predict(fit, testdata, type = 'class')
table_mat <- table(testdata$Survived, predict_unseen)
accuracy_Test <- sum(diag(table_mat)) / sum(table_mat)
accuracy_Test
}
control <- rpart.control(minsplit = 4,
minbucket = round(5 / 3),
maxdepth = 3,
cp = 0)
tune_fit <- rpart(Survived~., data = traindata, method = 'class', control = control)
accuracy_tune(tune_fit)
tune_fit <- rpart(Survived~., data = traindata, method = 'class', control = control)
accuracy_tune(tune_fit)
accuracy_Test <- sum(diag(table_mat)) / sum(table_mat)
print(paste('Accuracy for test', accuracy_Test))
accuracy_tune <- function(fit) {
predict_unseen <- predict(fit, testdata, type = 'class')
table_mat <- table(testdata$Survived, predict_unseen)
accuracy_Test <- sum(diag(table_mat)) / sum(table_mat)
accuracy_Test
}
control <- rpart.control(minsplit = 4,
minbucket = round(5 / 3),
maxdepth = 3,
cp = 0)
tune_fit <- rpart(Survived~., data = traindata, method = 'class', control = control)
accuracy_tune(tune_fit)
fit <- rpart(Survived~., data = traindata, method = 'class')
rpart.plot(fit, extra = 106)
predict_unseen <-predict(fit, testdata, type = 'class')
table_mat <- table(testdata$Survived, predict_unseen)
# predicted 139 entries correctly 40 entries incorrectly
table_mat
accuracy_Test <- sum(diag(table_mat)) / sum(table_mat)
print(paste('Accuracy for test', accuracy_Test))
accuracy_tune <- function(fit) {
predict_unseen <- predict(fit, testdata, type = 'class')
table_mat <- table(testdata$Survived, predict_unseen)
accuracy_Test <- sum(diag(table_mat)) / sum(table_mat)
accuracy_Test
}
control <- rpart.control(minsplit = 4,
minbucket = round(7 / 3),
maxdepth = 3,
cp = 0)
tune_fit <- rpart(Survived~., data = traindata, method = 'class', control = control)
accuracy_tune(tune_fit)
predict_unseen <-predict(fit, testdata, type = 'class')
table_mat <- table(testdata$Survived, predict_unseen)
# predicted 139 entries correctly 40 entries incorrectly
table_mat
accuracy_Test <- sum(diag(table_mat)) / sum(table_mat)
print(paste('Accuracy for test', accuracy_Test))
accuracy_tune <- function(fit) {
predict_unseen <- predict(fit, testdata, type = 'class')
table_mat <- table(testdata$Survived, predict_unseen)
accuracy_Test <- sum(diag(table_mat)) / sum(table_mat)
accuracy_Test
}
control <- rpart.control(minsplit = 4,
minbucket = round(7 / 3),
maxdepth = 5,
cp = 0)
tune_fit <- rpart(Survived~., data = traindata, method = 'class', control = control)
accuracy_tune(tune_fit)
prop.table(table(traindata$Survived))
prop.table(table(testdata$Survived))
accuracy_tune(tune_fit)
head(shuffle_index)
# change the indexing i.e. make it shuffled
titanic <- titanic[shuffle_index, ]
head(titanic)
View(titanic)
# Cleaning the data
library(dplyr)
# viewing the new data and its dimentions
head(traindata)
dim(clean_titanic)
dim(traindata)
dim(testdata)
# used to verify the if the randomization process is correct
prop.table(table(traindata$Survived))
prop.table(table(testdata$Survived))
accuracy_tune(tune_fit)
# Printing the accuracy
accuracy_Test <- sum(diag(table_mat)) / sum(table_mat)
print(paste('Accuracy for test', accuracy_Test))
accuracy_tune(tune_fit)
# splitting the data into test and train in the given split ratio
X = sample.split(Y = clean_titanic,SplitRatio = 0.8)
# Printing the accuracy
accuracy_Test <- sum(diag(table_mat)) / sum(table_mat)
library(dplyr)
# Drop variables
clean_titanic <- titanic %>%select(-c(Cabin, Name, PassengerId, Ticket)) %>% mutate(Pclass = factor(Pclass, levels = c(1, 2, 3), labels = c('Upper', 'Middle', 'Lower')),Survived = factor(Survived, levels = c(0, 1), labels = c('No', 'Yes')))%>%na.omit()
glimpse(clean_titanic)
# splitting the data into test and train in the given split ratio
X = sample.split(Y = clean_titanic,SplitRatio = 0.8)
traindata = clean_titanic[X,]
# Find all the files on
# https://github.com/Abhijit25Mishra/R-Lab--ICS-321-
# https://rpubs.com/Panda_250
print("Abhijit Mishra")
set.seed(678)
print(getwd())
setwd("C:/Users/ASUS/OneDrive/Desktop/Study-Material/IIIT-Kottayam/SEM-6/Data warehousing and mining ICS 321/Lab/Lab-8")
path <- 'titanic.csv'
titanic <-read.csv(path)
# having a view of the data
summary(titanic)
head(titanic)
tail(titanic)
# Since the data is sorted we need to randomize the data
shuffle_index <- sample(1:nrow(titanic))
head(shuffle_index)
# change the indexing i.e. make it shuffled
titanic <- titanic[shuffle_index, ]
head(titanic)
View(titanic)
library(dplyr)
# Drop variables
clean_titanic <- titanic %>%select(-c(Cabin, Name, PassengerId, Ticket)) %>% mutate(Pclass = factor(Pclass, levels = c(1, 2, 3), labels = c('Upper', 'Middle', 'Lower')),Survived = factor(Survived, levels = c(0, 1), labels = c('No', 'Yes')))%>%na.omit()
glimpse(clean_titanic)
# splitting the data into test and train in the given split ratio
X = sample.split(Y = clean_titanic,SplitRatio = 0.8)
traindata = clean_titanic[X,]
testdata = clean_titanic[!X,]
# viewing the new data and its dimentions
head(traindata)
dim(clean_titanic)
dim(traindata)
dim(testdata)
# used to verify the if the randomization process is correct
prop.table(table(traindata$Survived))
prop.table(table(testdata$Survived))
# installing and importing libraries
install.packages("rpart.plot")
install.packages("rpart.plot")
library(rpart)
library(rpart.plot)
fit <- rpart(Survived~., data = traindata, method = 'class')
rpart.plot(fit, extra = 106)
# testing on the unseen i.e. the test data
predict_unseen <-predict(fit, testdata, type = 'class')
table_mat <- table(testdata$Survived, predict_unseen)
# predicted 139 entries correctly 40 entries incorrectly
table_mat
# Printing the accuracy
accuracy_Test <- sum(diag(table_mat)) / sum(table_mat)
print(paste('Accuracy for test', accuracy_Test))
accuracy_tune <- function(fit) {
predict_unseen <- predict(fit, testdata, type = 'class')
table_mat <- table(testdata$Survived, predict_unseen)
accuracy_Test <- sum(diag(table_mat)) / sum(table_mat)
accuracy_Test
}
control <- rpart.control(minsplit = 4,
minbucket = round(7 / 3),
maxdepth = 5,
cp = 0)
tune_fit <- rpart(Survived~., data = traindata, method = 'class', control = control)
accuracy_tune(tune_fit)
