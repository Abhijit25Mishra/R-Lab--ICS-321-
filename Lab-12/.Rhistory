}
if(flag){
print(paste(inp,"is prime"))
}else{
print(paste(inp,"is not prime"))
}
}
primeOrNot(inp)
primeOrNot<-function(inp){
flag = TRUE
for(i in 2:inp ){
if(inp%%i==0){
flag = FALSE
break
}
}
if(flag){
print(paste(inp,"is prime"))
}else{
print(paste(inp,"is not prime"))
}
}
primeOrNot(inp)
primeOrNot<-function(inp){
flag = TRUE
for(i in 2:inp ){
if(inp%%i==0){
print(i)
flag = FALSE
break
}
}
if(flag){
print(paste(inp,"is prime"))
}else{
print(paste(inp,"is not prime"))
}
}
primeOrNot(inp)
primeOrNot<-function(inp){
flag = TRUE
for(i in 2:inp-1 ){
if(inp%%i==0){
print(i)
flag = FALSE
break
}
}
if(flag){
print(paste(inp,"is prime"))
}else{
print(paste(inp,"is not prime"))
}
}
primeOrNot(inp)
primeOrNot<-function(inp){
flag = TRUE
for(z in 2:inp-1 ){
if(inp%%i==0){
print(i)
flag = FALSE
break
}
}
if(flag){
print(paste(inp,"is prime"))
}else{
print(paste(inp,"is not prime"))
}
}
primeOrNot(inp)
primeOrNot<-function(inp){
flag = TRUE
for(z in 2:inp-1 ){
if(inp%%i==0){
print(i)
flag = FALSE
break
}
}
if(flag){
print(paste(inp,"is prime"))
}else{
print(paste(inp,"is not prime"))
}
}
primeOrNot(inp)
primeOrNot(inp)
primeOrNot<-function(inp){
flag = TRUE
for(z in 2:inp-1 ){
if(inp %% z == 0){
print(z)
flag = FALSE
break
}
}
if(flag){
print(paste(inp,"is prime"))
}else{
print(paste(inp,"is not prime"))
}
}
primeOrNot(inp)
primeOrNot<-function(inp){
flag = TRUE
for(z in 2:inp-1 ){
if((inp %% z) == 0){
print(z)
flag = FALSE
break
}
}
if(flag){
print(paste(inp,"is prime"))
}else{
print(paste(inp,"is not prime"))
}
}
primeOrNot(inp)
primeOrNot<-function(inp){
flag = TRUE
for(z in 2:inp-1 ){
if((inp %% z) == 0){
print(z)
flag = FALSE
break
}
print(z)
}
if(flag){
print(paste(inp,"is prime"))
}else{
print(paste(inp,"is not prime"))
}
}
primeOrNot(inp)
primeOrNot<-function(inp){
flag = TRUE
for(z in 2:inp-1 ){
if((inp %% z) == 0){
print(z)
flag = FALSE
}
print(z)
}
if(flag){
print(paste(inp,"is prime"))
}else{
print(paste(inp,"is not prime"))
}
}
primeOrNot(inp)
primeOrNot<-function(inp){
flag = TRUE
for(z in 2:(inp-1) ){
if((inp %% z) == 0){
print(z)
flag = FALSE
}
print(z)
}
if(flag){
print(paste(inp,"is prime"))
}else{
print(paste(inp,"is not prime"))
}
}
primeOrNot(inp)
A <- matrix(1:6, nrow=2)
A
B<- matrix(1:6,ncol=2)
B
A%*%B
PL <- iris$Petal.Length
barplot(PL)
hist(PL)
SP <- iris$Species
boxplot(PL ~ SP)
summary(aov(PL ~ SP))
PW <- df$Petal.Width
plot(PL, PW, col = SP)
abline(lm(PW ~ PL))
PW <- iris$Petal.Width
plot(PL, PW, col = SP)
abline(lm(PW ~ PL))
heatmap(iris)
heatmap(ma,scale = "column",RowSideColors = rainbow(3)[iris$Species])
ma <- as.matrix(iris[, 1:4]) # convert to matrix
disMatarix <- dist(ma)
plot(hclust(disMatarix))
heatmap(ma,scale = "column",RowSideColors = rainbow(3)[iris$Species])
age <- c(23,23,27,27,39,41,49,50,52,54,54,56,57,58,58,60,61)
age <- c(23,23,27,27,39,41,49,50,52,54,54,56,57,58,58,60,61)
fatpercent <- c(9.5,26.5,7.8,17.8,31.4,25.9,27.4,27.2,31.2,34.6,42.5,28.8,33.4,30.2,34.1,32.9,41.2,35.7)
data <- list(A = age,B = fatpercent)
df <- as.data.frame(data)
data
age <- c(23,23,27,27,39,41,47,49,50,52,54,54,56,57,58,58,60,61)
fatpercent <- c(9.5,26.5,7.8,17.8,31.4,25.9,27.4,27.2,31.2,34.6,42.5,28.8,33.4,30.2,34.1,32.9,41.2,35.7)
data <- list(A = age,B = fatpercent)
data
df <- as.data.frame(data)
df
data <- list(Age = age,%fat = fatpercent)
data <- list(Age = age,FatPercent = fatpercent)
data
df <- as.data.frame(data)
df
cor(df)
cor(df$Age,df$FatPercent)
# Histogram
hist(iris$Petal.Length,breaks = 30,col="blue", xlab = "Petal Length", main = " Histogram of Pertal Length" )
qplot(Sepal.Length, data=iris, geom='histogram', fill=Species, alpha=I(1/2))
qplot(Sepal.Length, data=iris, geom='histogram', fill=Species, alpha=I(1/2))
# importing plotting lib
require(ggplot2)
# Density plot
qplot(Petal.Length, data=iris, geom='density')
qplot(Petal.Length, data=iris, geom='density', color=Species, fill=Species)
qplot(Sepal.Length, data=iris, geom='histogram', fill=Species, alpha=I(1/2))
# Density plot
qplot(Petal.Length, data=iris, geom='density')
qplot(Petal.Length, data=iris, geom='density', color=Species, fill=Species)
qplot(Petal.Width, Petal.Length, data=iris, color=Species)
# Scatter plot
qplot(Petal.Width, Petal.Length, data=iris, color=Species)
cor(iris$Sepal.Length, iris$Petal.Length)
cov(iris$Sepal.Length, iris$Petal.Length)
# correlation and covariance
cor(iris$Sepal.Length, iris$Petal.Length)
cov(iris$Sepal.Length, iris$Petal.Length)
cov(iris[,1:4])
df <- iris[, 1:4]
boxplot(df)
pairs(df)
stars(df)
# making every plot i know of ;)
df <- iris[, 1:4]
boxplot(df)
pairs(df)
stars(df)
boxplot(iris)
scatter.smooth(iris)
matrix(scatter.smooth(iris))
table(iris)
pie(table(iris))
matrix(scatter.smooth(iris))
matrix(scatter.smooth(iris))
scatter.smooth(iris)
matrix(scatter.smooth(iris))
table(iris)
table(iris)
pie(table(iris))
barplot(PL)
hist(PL)
SP <- iris$Species
boxplot(PL ~ SP)
summary(aov(PL ~ SP))
PW <- iris$Petal.Width
plot(PL, PW, col = SP)
abline(lm(PW ~ PL))
ma <- as.matrix(iris[, 1:4]) # convert to matrix
disMatarix <- dist(ma)
plot(hclust(disMatarix))
heatmap(ma,scale = "column",RowSideColors = rainbow(3)[iris$Species])
plot(hclust(disMatarix))
heatmap(ma,scale = "column",RowSideColors = rainbow(3)[iris$Species])
vec1<-c(1.1, 2, 3.0, 4.2)
sum(vec1)
prod(vec1)
mean(vec1)
vec2<-c(1.1,NA, 2, 3.0,NA )
sum(vec2)
prod(vec2)
mean(vec2)
str = c("$I%Love!R programming %","cs^e%portal", "le%.5%rty.in","join2022%")
count(str,"%")
count(str,%)
str_count(str)
str = c("$I%Love!R programming %","cs^e%portal", "le%.5%rty.in","join2022%")
str_count(str)
str_count("%")
str = c("$I%Love!R programming %","cs^e%portal", "le%.5%rty.in","join2022%")
str_count("%")
str = c("$I%Love!R programming %","cs^e%portal", "le%.5%rty.in","join2022%")
str_count(str,pattern = "%")
install.packages("stringr")
library(stringr)
str = c("$I%Love!R programming %","cs^e%portal", "le%.5%rty.in","join2022%")
str_count(str,pattern = "%")
str_count(str,pattern = 'r')
ar <- array(1:5,c(2,3,4))
ar
dim(ar)
for(i in 1:100){
if(i%%4==0 && i%%5==0){
print("BuyNow ")
}
else if(i%%4==0){
print("Now ")
}
else if(i%%5==0){
print("Buy ")
}
else{
print(i)
print(" ")
}
}
for(i in 1:100){
if(i%%4==0 && i%%5==0){
print("BuyNow")
}
else if(i%%4==0){
print("Now")
}
else if(i%%5==0){
print("Buy")
}
else{
print(i)
}
}
print(Sys.Date())
print(Sys.time())
mtcars
data<-mtcars
View(data)
library(dplyr)
select(data)
data<-mtcars
View(data)
dim(data)
summary(data)
randu()
runif(2,1,32)
floor(runif(2,1,32))
floor(runif(2,1,32))
data %>% select(floor(runif(2,1,32))
data
data %>% select(floor(runif(2,1,32))
summary(data)
data %>% select(floor(runif(2,1,32)) )
data %>% select(floor(runif(2,1,1)) )
data %>% select(floor(runif(2,1,11)) )
data %>% select(floor(runif(2,1,11)) )
data %>% select(floor(runif(2,1,11)) )
data %>% select(floor(runif(2,1,11)) )
data %>% select(floor(runif(11,1,11)) )
data %>% select(floor(runif(11,1,11)) )
data %>% row.select(floor(runif(11,1,11)) )
data %>% row(select(floor(runif(11,1,11))) )
data %>% (select(row, floor(runif(11,1,11))) )
data %>% filter(floor(runif(11,1,11)))
data %>% filter(floor(runif(2,1,32)))
data %>% filter(floor(runif(1,1,32)))
data %>% filter(2)
data %>% filter(32)
filter(data,)
filter(data,1)
filter(data,false)
slice_sample(data)
slice_sample(data)
slice_sample(data,n)
slice_sample(data,5)
slice_sample(data,n=5)
sample_frac(data,n=5)
sample_frac(data,n=2)
sample_frac(data,n=2)
slice_sample(data,n=5)
sample_frac(data,n=2)
data %>% select(cyl, hp, wt )
filter(mtcars, am == 1)
filter(mtcars,hp>225)
mean(mtcars$mpg)
median(mtcars$mpg)
arrange(mtcars,desc(hp))
days <- c("Monday","Tuesday","Wednesday","Thrusday","Friday","Saturdat","Sunday")
nrbirds <- c(2,5,0,8,1,2,3)
df<-data.frame(days,nrbirds)
df
dayNumber<-c(1,2,3,4,5,6,7)
x<-c(1,2,3,4,5,6,7)
df$dayNumber <- x
df
df = subset(df,select(days))
df = subset(df,select = days)
df
df = subset(df,select = -c(days))
df
days <- c("Monday","Tuesday","Wednesday","Thrusday","Friday","Saturdat","Sunday")
nrbirds <- c(2,5,0,8,1,2,3)
df<-data.frame(days,nrbirds)
x<-c(1,2,3,4,5,6,7)
df$dayNumber <- x
df = subset(df,select = -c(days))
df
df <- select(df, dayNumber, nrbirds)
df
max_row <- which.max(df$nrbirds)
print(max_row)
df
max_row <- which.max(df$nrbirds)
print(max_row)
df[max_row]
df[max_row]
most_birds_daynumber <- df$dayNumber[max_row]
print(most_birds_daynumber)
df <- arrange(df, desc(nrbirds))
df
library(dplyr)
library(stringr)
install.packages(c('neuralnet','keras','tensorflow'),dependencies = T)
install.packages(c('neuralnet','keras','tensorflow'),dependencies = T)
# Find all the files on
# https://github.com/Abhijit25Mishra/R-Lab--ICS-321-
# https://rpubs.com/Panda_250
print("Abhijit Mishra")
#Find Sum, Mean and Product of a Vector in R
vec1<-c(1.1, 2, 3.0, 4.2)
sum(vec1)
# Find all the files on
# https://github.com/Abhijit25Mishra/R-Lab--ICS-321-
# https://rpubs.com/Panda_250
print("Abhijit Mishra")
# taking in input
x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)
y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)
# performing linear regression
relation <- lm(y~x)
relation
summary(relation)
# predecting ouput using the linear regesrrion relation we created earlier
a <- data.frame(x = 170)
result <-  predict(relation,a)
print(result)
# Give the chart file a name.
png(file = "linearregression.png")
# Plot the chart.
plot(y,x,col = "blue",main = "Height & Weight Regression",
abline(lm(x~y)),cex = 1.3,pch = 16,xlab = "Weight in Kg",ylab = "Height in cm")
# Plot the chart.
plot(y,x,col = "blue",main = "Height & Weight Regression",
abline(lm(x~y)),cex = 1.3,pch = 16,xlab = "Weight in Kg",ylab = "Height in cm")
dev.of()
dev.off()
# Plot the chart.
plot(y,x,col = "blue",main = "Height & Weight Regression",
abline(lm(x~y)),cex = 1.3,pch = 16,xlab = "Weight in Kg",ylab = "Height in cm")
library(ggplot2)
library(dplyr)
library(broom)
library(ggpubr)
# setting the working directory to use the csv file
print(getwd())
setwd("C:/Users/ASUS/OneDrive/Desktop/Study-Material/IIIT-Kottayam/SEM-6/Data warehousing and mining ICS 321/Lab/Lab-12")
income = read.csv("incomedata.csv")
heart = read.csv("heartdata.csv")
summary(income)
summary(heart)
hist(income$happiness)
plot(happiness ~ income, data = income)
hist(income$happiness)
plot(happiness ~ income, data = income)
cor(heart$biking, heart$smoking)
hist(heart$heart.disease)
plot(heart.disease ~ biking, data=heart)
plot(heart.disease ~ smoking, data=heart)
income.happiness.lm <- lm(happiness ~ income, data = income)
summary(income.happiness.lm)
heart.disease.lm<-lm(heart.disease ~ biking + smoking, data = heart)
summary(heart.disease.lm)
par(mfrow=c(2,2))
plot(income.happiness.lm)
par(mfrow=c(1,1))
par(mfrow=c(2,2))
plot(heart.disease.lm)
par(mfrow=c(1,1))
income.graph<-ggplot(income, aes(x=income, y=happiness))+geom_point()
income.graph
income.graph <- income.graph + geom_smooth(method="lm", col="black")
income.graph
income.graph <- income.graph +stat_regline_equation(label.x = 3, label.y = 7)
income.graph
income.graph + theme_bw() + labs(
title = "Reported happiness as a function of income",
x = "Income (x$10,000)",
y = "Happiness score (0 to 10)"
)
plotting.data<-expand.grid(
biking = seq(min(heart$biking), max(heart$biking), length.out=30),
smoking=c(min(heart$smoking), mean(heart$smoking), max(heart$smoking)))
plotting.data$predicted.y <- predict.lm(heart.disease.lm, newdata=plotting.data)
plotting.data$smoking <- round(plotting.data$smoking, digits = 2)
plotting.data$smoking <- as.factor(plotting.data$smoking)
heart.plot <- ggplot(heart, aes(x=biking, y=heart.disease)) +
geom_point()
heart.plot
heart.plot <- heart.plot +
geom_line(data=plotting.data, aes(x=biking, y=predicted.y, color=smoking))
heart.plot
heart.plot <-
heart.plot +
theme_bw() +
labs(title = "Rates of heart disease (% of population) \n as a function of biking to work and smoking",
x = "Biking to work (% of population)",
y = "Heart disease (% of population)",
color = "Smoking \n (% of population)")
heart.plot
heart.plot + annotate(geom="text", x=30, y=1.75, label=" = 15 + (-0.2*biking) + (0.178*smoking)")
print("We found a significant relationship between income and happiness (p < 0.001, R2 = 0.73 ± 0.0193), with a 0.73-unit increase in reported happiness for every $10,000 increase in income.")
